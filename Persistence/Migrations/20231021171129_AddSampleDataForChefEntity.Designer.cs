// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Contexts;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231021171129_AddSampleDataForChefEntity")]
    partial class AddSampleDataForChefEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ActiveStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Bio")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ProfilePicture")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Roles")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Account", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("44472ea7-1744-424d-a95d-122e0420897b"),
                            ActiveStatus = 1,
                            Bio = "Bio information for John Doe.",
                            CreatedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1664),
                            DateOfBirth = new DateTime(1985, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john.doe@example.com",
                            FirstName = "John",
                            Gender = 0,
                            LastModifiedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1678),
                            LastName = "Doe",
                            Password = "securepassword1",
                            PhoneNumber = "1234567890",
                            ProfilePicture = "/profile/john_doe.jpg",
                            Roles = 1,
                            Username = "john_doe"
                        },
                        new
                        {
                            Id = new Guid("b4d4ee62-73f8-4840-9b49-2af666463a68"),
                            ActiveStatus = 1,
                            Bio = "Bio information for Jane Smith.",
                            CreatedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1689),
                            DateOfBirth = new DateTime(1990, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jane.smith@example.com",
                            FirstName = "Jane",
                            Gender = 1,
                            LastModifiedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1690),
                            LastName = "Smith",
                            Password = "p@ssw0rd",
                            PhoneNumber = "9876543210",
                            ProfilePicture = "/profile/jane_smith.jpg",
                            Roles = 2,
                            Username = "jane_smith"
                        },
                        new
                        {
                            Id = new Guid("f0db6432-7483-4d2c-82b0-bcef1fdb1d04"),
                            ActiveStatus = 1,
                            Bio = "Bio information for Bob Jones.",
                            CreatedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1696),
                            DateOfBirth = new DateTime(1988, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bob.jones@example.com",
                            FirstName = "Bob",
                            Gender = 0,
                            LastModifiedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1697),
                            LastName = "Jones",
                            Password = "strongpass123",
                            PhoneNumber = "5556667777",
                            ProfilePicture = "/profile/bob_jones.jpg",
                            Roles = 2,
                            Username = "bob_jones"
                        },
                        new
                        {
                            Id = new Guid("b88631cd-ae6c-4556-8064-9187f1929796"),
                            ActiveStatus = 1,
                            Bio = "Bio information for Sara Wilson.",
                            CreatedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1731),
                            DateOfBirth = new DateTime(1992, 7, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sara.wilson@example.com",
                            FirstName = "Sara",
                            Gender = 1,
                            LastModifiedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1732),
                            LastName = "Wilson",
                            Password = "sara123",
                            PhoneNumber = "1112223333",
                            ProfilePicture = "/profile/sara_wilson.jpg",
                            Roles = 2,
                            Username = "sara_wilson"
                        },
                        new
                        {
                            Id = new Guid("f0797d34-f3bf-41f1-aad6-d227cff1a99e"),
                            ActiveStatus = 1,
                            Bio = "Bio information for Mike Jackson.",
                            CreatedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1737),
                            DateOfBirth = new DateTime(1980, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mike.jackson@example.com",
                            FirstName = "Mike",
                            Gender = 0,
                            LastModifiedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1738),
                            LastName = "Jackson",
                            Password = "mikepass",
                            PhoneNumber = "3334445555",
                            ProfilePicture = "/profile/mike_jackson.jpg",
                            Roles = 2,
                            Username = "mike_jackson"
                        },
                        new
                        {
                            Id = new Guid("4c66f0e4-4ca0-4b6a-803f-9efb2b9914a0"),
                            ActiveStatus = 1,
                            Bio = "Bio information for Nguyen Phat.",
                            CreatedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1743),
                            DateOfBirth = new DateTime(2002, 11, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "nguyenphat2711@gmail.com",
                            FirstName = "Nguyen",
                            Gender = 0,
                            LastModifiedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1744),
                            LastName = "Phat",
                            Password = "Phat@2711",
                            PhoneNumber = "0812400096",
                            ProfilePicture = "/profile/phatnt.jpg",
                            Roles = 2,
                            Username = "fatnofat"
                        },
                        new
                        {
                            Id = new Guid("2a117f10-93c8-4cc7-aee3-dbe85b3fa773"),
                            ActiveStatus = 1,
                            Bio = "Bio information for Nguyen Phat.",
                            CreatedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1748),
                            DateOfBirth = new DateTime(2002, 11, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "khoatruong@gmail.com",
                            FirstName = "Truong",
                            Gender = 0,
                            LastModifiedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1749),
                            LastName = "Khoa",
                            Password = "Khoa2k17",
                            PhoneNumber = "0123456789",
                            ProfilePicture = "/profile/phatnt.jpg",
                            Roles = 2,
                            Username = "khoatruong"
                        },
                        new
                        {
                            Id = new Guid("ac2cd922-1e8e-4290-bf43-812f337d8ee1"),
                            ActiveStatus = 1,
                            Bio = "Bio information for Nguyen Van Dung.",
                            CreatedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1754),
                            DateOfBirth = new DateTime(2002, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Dungkinaysinhviengioi@gmail.com",
                            FirstName = "Nguyen",
                            Gender = 0,
                            LastModifiedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1755),
                            LastName = "Van Dung",
                            Password = "Dunghocgioivcl",
                            PhoneNumber = "0123456789",
                            ProfilePicture = "/profile/dungnv.jpg",
                            Roles = 2,
                            Username = "vandung"
                        },
                        new
                        {
                            Id = new Guid("1890281f-fe26-40ba-aaad-3b3c74e65c32"),
                            ActiveStatus = 1,
                            Bio = "Bio information for Truong Le Tuan Kiet.",
                            CreatedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1760),
                            DateOfBirth = new DateTime(2002, 10, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "kiethathayvai@gmail.com",
                            FirstName = "Truong",
                            Gender = 0,
                            LastModifiedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1761),
                            LastName = "Le Tuan Kiet",
                            Password = "Kiethocgioihayhat",
                            PhoneNumber = "0123456789",
                            ProfilePicture = "/profile/kiettlt.jpg",
                            Roles = 2,
                            Username = "truongletuankiet"
                        },
                        new
                        {
                            Id = new Guid("42ce4c18-119b-4cf9-aeb1-2224b3d54bc2"),
                            ActiveStatus = 1,
                            Bio = "Bio information for Le Thi Thu Trang.",
                            CreatedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1767),
                            DateOfBirth = new DateTime(2002, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "trangxinhgai@gmail.com",
                            FirstName = "Le",
                            Gender = 1,
                            LastModifiedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1768),
                            LastName = "Thi Thu Trang",
                            Password = "trangxinhxinhhihi",
                            PhoneNumber = "0123456789",
                            ProfilePicture = "/profile/trangltt.jpg",
                            Roles = 2,
                            Username = "trangxinhgai"
                        },
                        new
                        {
                            Id = new Guid("18b56e56-6ff5-4089-a4ac-2496bac13879"),
                            ActiveStatus = 1,
                            Bio = "Bio information for Nguyen Duc Binh.",
                            CreatedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1773),
                            DateOfBirth = new DateTime(2002, 12, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ducbinhnguyen@gmail.com",
                            FirstName = "Nguyen",
                            Gender = 0,
                            LastModifiedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1773),
                            LastName = "Duc Binh",
                            Password = "binhleader",
                            PhoneNumber = "0123456789",
                            ProfilePicture = "/profile/binhnd.jpg",
                            Roles = 2,
                            Username = "ducbinhnguyen"
                        },
                        new
                        {
                            Id = new Guid("97439595-a2f4-4542-8e2d-6d4b0d0790cb"),
                            ActiveStatus = 1,
                            Bio = "Avid reader",
                            CreatedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1845),
                            DateOfBirth = new DateTime(1990, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user1@user1.com",
                            FirstName = "John",
                            Gender = 0,
                            LastModifiedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1846),
                            LastName = "Doe",
                            Password = "password1",
                            PhoneNumber = "1234567890",
                            ProfilePicture = "/profile/profile1.jpg",
                            Roles = 1,
                            Username = "user1"
                        },
                        new
                        {
                            Id = new Guid("e152821d-70bf-47af-8746-5c5486ca552a"),
                            ActiveStatus = 1,
                            Bio = "Nature lover",
                            CreatedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1851),
                            DateOfBirth = new DateTime(1985, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user2@user2.com",
                            FirstName = "Alice",
                            Gender = 1,
                            LastModifiedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1852),
                            LastName = "Johnson",
                            Password = "password2",
                            PhoneNumber = "2345678901",
                            ProfilePicture = "/profile/profile2.jpg",
                            Roles = 1,
                            Username = "user2"
                        },
                        new
                        {
                            Id = new Guid("566d3f29-ea8f-425c-a7c7-53c79a656109"),
                            ActiveStatus = 1,
                            Bio = "Tech enthusiast",
                            CreatedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1857),
                            DateOfBirth = new DateTime(1988, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user3@user3.com",
                            FirstName = "Michael",
                            Gender = 0,
                            LastModifiedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1858),
                            LastName = "Smith",
                            Password = "password3",
                            PhoneNumber = "3456789012",
                            ProfilePicture = "/profile/profile3.jpg",
                            Roles = 1,
                            Username = "user3"
                        },
                        new
                        {
                            Id = new Guid("a8348939-3a49-41b9-8ecb-38450738b427"),
                            ActiveStatus = 1,
                            Bio = "Traveler",
                            CreatedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1862),
                            DateOfBirth = new DateTime(1992, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user4@user4.com",
                            FirstName = "Emily",
                            Gender = 1,
                            LastModifiedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1863),
                            LastName = "Davis",
                            Password = "password4",
                            PhoneNumber = "4567890123",
                            ProfilePicture = "/profile/profile4.jpg",
                            Roles = 1,
                            Username = "user4"
                        },
                        new
                        {
                            Id = new Guid("1e1f19be-3c5f-413f-b5cc-2e4f21e8132f"),
                            ActiveStatus = 1,
                            Bio = "Fitness enthusiast",
                            CreatedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1869),
                            DateOfBirth = new DateTime(1983, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user5@user5.com",
                            FirstName = "Daniel",
                            Gender = 0,
                            LastModifiedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1870),
                            LastName = "Brown",
                            Password = "password5",
                            PhoneNumber = "5678901234",
                            ProfilePicture = "/profile/profile5.jpg",
                            Roles = 1,
                            Username = "user5"
                        },
                        new
                        {
                            Id = new Guid("2631d4d8-ffb0-4a27-9057-e0838efcf758"),
                            ActiveStatus = 1,
                            Bio = "I love exploring new cuisines and trying out different recipes. Excited to be a part of this culinary community!",
                            CreatedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1917),
                            DateOfBirth = new DateTime(1988, 3, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john.customer@example.com",
                            FirstName = "John",
                            Gender = 0,
                            LastModifiedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1918),
                            LastName = "Smith",
                            Password = "customer123",
                            PhoneNumber = "1234567890",
                            ProfilePicture = "/profile/john_smith.jpg",
                            Roles = 0,
                            Username = "johncustomer"
                        },
                        new
                        {
                            Id = new Guid("af953084-bf02-4575-9d01-cc66e64c20a8"),
                            ActiveStatus = 1,
                            Bio = "Food enthusiast and home cook. I enjoy experimenting with flavors and creating delightful dishes for my family and friends.",
                            CreatedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1923),
                            DateOfBirth = new DateTime(1990, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "emily.foodie@example.com",
                            FirstName = "Emily",
                            Gender = 0,
                            LastModifiedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1924),
                            LastName = "Johnson",
                            Password = "emily1234",
                            PhoneNumber = "2345678901",
                            ProfilePicture = "/profile/emily_johnson.jpg",
                            Roles = 0,
                            Username = "emily_foods"
                        },
                        new
                        {
                            Id = new Guid("d2dcddd7-2b61-4ff1-8c82-97334a4515b5"),
                            ActiveStatus = 1,
                            Bio = "Passionate about healthy living and clean eating. Sharing my journey towards a healthier lifestyle through nutritious meals.",
                            CreatedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1929),
                            DateOfBirth = new DateTime(1985, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "healthymeals@example.com",
                            FirstName = "Alice",
                            Gender = 1,
                            LastModifiedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1929),
                            LastName = "Green",
                            Password = "healthyeats",
                            PhoneNumber = "3456789012",
                            ProfilePicture = "/profile/alice_green.jpg",
                            Roles = 0,
                            Username = "healthy_eater"
                        },
                        new
                        {
                            Id = new Guid("57716c51-dc6e-40b3-a05c-a8f75a7b6dad"),
                            ActiveStatus = 1,
                            Bio = "A food lover who enjoys exploring different cuisines and local delicacies during my travels. Food brings people together!",
                            CreatedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1972),
                            DateOfBirth = new DateTime(1982, 12, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "foodexplorer@example.com",
                            FirstName = "Daniel",
                            Gender = 0,
                            LastModifiedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1973),
                            LastName = "Baker",
                            Password = "foodlover",
                            PhoneNumber = "4567890123",
                            ProfilePicture = "/profile/daniel_baker.jpg",
                            Roles = 0,
                            Username = "traveling_foodie"
                        },
                        new
                        {
                            Id = new Guid("180070e0-1b3a-4758-9892-a4de860f3d37"),
                            ActiveStatus = 1,
                            Bio = "Passionate about baking and pastry creations. Join me on my baking adventures as I explore the art of sweets and treats!",
                            CreatedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1978),
                            DateOfBirth = new DateTime(1989, 6, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "baker@example.com",
                            FirstName = "Olivia",
                            Gender = 1,
                            LastModifiedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1978),
                            LastName = "Miller",
                            Password = "bakeitup",
                            PhoneNumber = "5678901234",
                            ProfilePicture = "/profile/olivia_miller.jpg",
                            Roles = 0,
                            Username = "baking_enthusiast"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Campaign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CampaignName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("ChefID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 10, 22, 0, 11, 29, 265, DateTimeKind.Local).AddTicks(6062));

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.HasKey("Id");

                    b.HasIndex("ChefID");

                    b.ToTable("Campaign", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Certification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CertificationDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CertificationURL")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("ChefID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EffectiveDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpirationDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("IsValid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.Property<string>("IssuingAuthority")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("CertificationId");

                    b.HasIndex("ChefID");

                    b.ToTable("Certification", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Chef", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Awards")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Experience")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique()
                        .HasFilter("[AccountId] IS NOT NULL");

                    b.ToTable("Chef", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0e8417e4-32a4-4e34-bfcb-a1babceef173"),
                            AccountId = new Guid("97439595-a2f4-4542-8e2d-6d4b0d0790cb"),
                            Awards = "Best Chef 2022",
                            CreatedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1816),
                            Experience = "Experienced Chef",
                            LastModifiedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1817)
                        },
                        new
                        {
                            Id = new Guid("70d7faf7-74f2-4144-b537-32d84b03bad4"),
                            AccountId = new Guid("e152821d-70bf-47af-8746-5c5486ca552a"),
                            Awards = "Best Chef 2022",
                            CreatedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1819),
                            Experience = "Experienced Chef",
                            LastModifiedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1820)
                        },
                        new
                        {
                            Id = new Guid("9cf3c8f4-db9f-4f2e-9aa8-1107c8a44494"),
                            AccountId = new Guid("566d3f29-ea8f-425c-a7c7-53c79a656109"),
                            Awards = "Top Chef 2022",
                            CreatedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1823),
                            Experience = "Master Chef",
                            LastModifiedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1823)
                        },
                        new
                        {
                            Id = new Guid("36251f06-e1a8-447a-a14c-06c217215a06"),
                            AccountId = new Guid("a8348939-3a49-41b9-8ecb-38450738b427"),
                            Awards = "Culinary Excellence Award 2022",
                            CreatedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1827),
                            Experience = "Gourmet Chef",
                            LastModifiedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1828)
                        },
                        new
                        {
                            Id = new Guid("5849ced6-f47f-4d3b-a46f-2a40c0d711fc"),
                            AccountId = new Guid("1e1f19be-3c5f-413f-b5cc-2e4f21e8132f"),
                            Awards = "Michelin Star Chef 2022",
                            CreatedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1830),
                            Experience = "Executive Chef",
                            LastModifiedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1830)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 10, 22, 0, 11, 29, 266, DateTimeKind.Local).AddTicks(3577));

                    b.Property<int?>("DisplayIndex")
                        .HasColumnType("int");

                    b.Property<byte>("ISEdited")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.Property<byte>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParentCommentId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("CommentId");

                    b.HasIndex("AccountId");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("PostId");

                    b.ToTable("Comment", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RewardsPoints")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique()
                        .HasFilter("[AccountId] IS NOT NULL");

                    b.ToTable("Customer", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d0d1e6dd-fae7-42ab-a912-4db59222e87c"),
                            AccountId = new Guid("2631d4d8-ffb0-4a27-9057-e0838efcf758"),
                            Address = "123 Main St",
                            CreatedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1888),
                            LastModifiedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1888),
                            RewardsPoints = 100
                        },
                        new
                        {
                            Id = new Guid("e6244496-049b-471c-950f-366beac0e4e2"),
                            AccountId = new Guid("af953084-bf02-4575-9d01-cc66e64c20a8"),
                            Address = "456 Elm St",
                            CreatedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1891),
                            LastModifiedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1891),
                            RewardsPoints = 200
                        },
                        new
                        {
                            Id = new Guid("53b1274c-c23d-4aa2-9442-fc4baf75843f"),
                            AccountId = new Guid("d2dcddd7-2b61-4ff1-8c82-97334a4515b5"),
                            Address = "789 Oak St",
                            CreatedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1894),
                            LastModifiedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1894),
                            RewardsPoints = 150
                        },
                        new
                        {
                            Id = new Guid("0db1a7a2-153f-4194-9281-93f2fb351e7f"),
                            AccountId = new Guid("57716c51-dc6e-40b3-a05c-a8f75a7b6dad"),
                            Address = "101 Pine St",
                            CreatedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1898),
                            LastModifiedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1899),
                            RewardsPoints = 250
                        },
                        new
                        {
                            Id = new Guid("b9f14590-70fb-4379-a3e3-616d8da859f4"),
                            AccountId = new Guid("180070e0-1b3a-4758-9892-a4de860f3d37"),
                            Address = "202 Maple St",
                            CreatedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1901),
                            LastModifiedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1902),
                            RewardsPoints = 300
                        });
                });

            modelBuilder.Entity("Domain.Entities.Dish", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 10, 22, 0, 11, 29, 267, DateTimeKind.Local).AddTicks(1993));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("DishCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DishImage")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("DishIngredients")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("DishName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.HasKey("Id")
                        .HasName("DishId");

                    b.HasIndex("DishCategoryId");

                    b.HasIndex("MenuId");

                    b.ToTable("Dish", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.DishCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte>("isActived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.HasKey("Id")
                        .HasName("DishCategoryId");

                    b.ToTable("DishCategory", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Like", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("LikeId");

                    b.HasIndex("AccountId");

                    b.HasIndex("PostId");

                    b.ToTable("Like", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.Property<byte>("IsEdited")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId")
                        .IsUnique();

                    b.ToTable("Menu", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Discount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.Property<DateTime>("ExpectedDeliveryTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NumberOfItems")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 10, 22, 0, 11, 29, 267, DateTimeKind.Local).AddTicks(8968));

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<float>("TotalAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.HasKey("Id")
                        .HasName("OrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PaymentId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.OrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DishId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("IsCancelled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<float>("UnitPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.HasKey("Id")
                        .HasName("OrderDetailId");

                    b.HasIndex("DishId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetail", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte>("IsActived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("PaymentId");

                    b.ToTable("Payment", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("6724c547-1b11-48ad-8bf0-4c1e8bf54ab8"),
                            CreatedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1997),
                            Description = "Thanh toan qua vi dien tu momo",
                            IsActived = (byte)1,
                            LastModifiedDate = new DateTime(2023, 10, 22, 0, 11, 29, 264, DateTimeKind.Local).AddTicks(1998),
                            Name = "Momo"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DisplayIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<byte>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.Property<byte>("IsEdited")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MediaURLs")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("PostId");

                    b.HasIndex("AccountID");

                    b.ToTable("Post", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Campaign", b =>
                {
                    b.HasOne("Domain.Entities.Chef", "Chef")
                        .WithMany("Campaigns")
                        .HasForeignKey("ChefID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chef");
                });

            modelBuilder.Entity("Domain.Entities.Certification", b =>
                {
                    b.HasOne("Domain.Entities.Chef", "Chef")
                        .WithMany("Certifications")
                        .HasForeignKey("ChefID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chef");
                });

            modelBuilder.Entity("Domain.Entities.Chef", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithOne("Chef")
                        .HasForeignKey("Domain.Entities.Chef", "AccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Entities.Comment", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithMany("Comments")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Comment", "ParentComment")
                        .WithMany("ChildComments")
                        .HasForeignKey("ParentCommentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Comment_Comment_ParentCommentId");

                    b.HasOne("Domain.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("ParentComment");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithOne("Customer")
                        .HasForeignKey("Domain.Entities.Customer", "AccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Entities.Dish", b =>
                {
                    b.HasOne("Domain.Entities.DishCategory", "DishCategory")
                        .WithMany("Dishes")
                        .HasForeignKey("DishCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Menu", "Menu")
                        .WithMany("Dishes")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DishCategory");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("Domain.Entities.Like", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithMany("Likes")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Post", "Post")
                        .WithMany("Likes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Domain.Entities.Menu", b =>
                {
                    b.HasOne("Domain.Entities.Campaign", "Campaign")
                        .WithOne("Menu")
                        .HasForeignKey("Domain.Entities.Menu", "CampaignId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Payment", "Payment")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Domain.Entities.OrderDetail", b =>
                {
                    b.HasOne("Domain.Entities.Dish", "Dish")
                        .WithMany("OrderDetails")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Order", "Order")
                        .WithMany("OrdersDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Domain.Entities.Post", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithMany("Posts")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Entities.Account", b =>
                {
                    b.Navigation("Chef");

                    b.Navigation("Comments");

                    b.Navigation("Customer");

                    b.Navigation("Likes");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Domain.Entities.Campaign", b =>
                {
                    b.Navigation("Menu");
                });

            modelBuilder.Entity("Domain.Entities.Chef", b =>
                {
                    b.Navigation("Campaigns");

                    b.Navigation("Certifications");
                });

            modelBuilder.Entity("Domain.Entities.Comment", b =>
                {
                    b.Navigation("ChildComments");
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Domain.Entities.Dish", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Domain.Entities.DishCategory", b =>
                {
                    b.Navigation("Dishes");
                });

            modelBuilder.Entity("Domain.Entities.Menu", b =>
                {
                    b.Navigation("Dishes");
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.Navigation("OrdersDetails");
                });

            modelBuilder.Entity("Domain.Entities.Payment", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Domain.Entities.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");
                });
#pragma warning restore 612, 618
        }
    }
}
